; [Comments translated from German to English]

; *****************************************************************************
; *                                                                           *
; *                     Macros for the SVGA.BGI driver                        *
; *                                                                           *
; * (C) 1990-94 by                                                            *
; * Ullrich von Bassewitz                                                     *
; * Zwehrenbuehlstrasse 33                                                    *
; * D-72070 Tuebingen                                                         *
; *                                                                           *
; * E-Mail: uz@ibb.schwaben.de                                                *
; *                                                                           *
; *****************************************************************************



MACRO   LOOPCX  Lbl
	IF P80386
	        dec     cx
	        jnz     Lbl
        ELSE
		loop	Lbl
	ENDIF
ENDM    LOOPCX



MACRO   EnterProc  LocalSize
IF      LocalSize
        IF P80286
                enter   LocalSize, 0
        ELSE
                push    bp
                mov     bp, sp
                sub     sp, LocalSize
        ENDIF
ELSE
        push    bp
        mov     bp, sp
ENDIF
ENDM


MACRO	Add2 Reg
	IF P80386        
		add     Reg, 2
	ELSE
		inc     Reg
		inc     Reg
ENDIF
ENDM

MACRO	Sub2 Reg
	IF P80386        
		sub	Reg, 2
	ELSE
		dec     Reg
		dec     Reg
ENDIF
ENDM





MACRO   LeaveProc
IF P80286
        leave
ELSE
        mov     sp, bp
        pop     bp
ENDIF
ENDM


MACRO	RepMovS
IF P80386
	push    cx
	shr     cx, 2
	rep	movsd
	pop     cx
	and     cx, 3
	rep	movsb
ELSE
        shr     cx, 1                   ; / 2 for words
        rep     movsw                   ; Copy words
        adc     cx, cx                  ; Still a carry left?
        rep     movsb                   ; Copy byte if carry
ENDIF
ENDM


MACRO	RepStoS
IF P80386
	push	ax
	push	ax
	pop	eax
	push    cx
	shr     cx, 2
	rep	stosd
	pop     cx
	and     cx, 3
	rep	stosb
ELSE
        shr     cx, 1                   ; / 2 for words
        rep     stosw                   ; Copy words
        adc     cx, cx                  ; Still a carry left?
        rep     stosb                   ; Copy byte if carry
ENDIF
ENDM



; The following macro calculates the address for a position in X/Y and
; sets the segment accordingly. Seg64 must contain an active segment,
; ax contains the Y and bx the X value. The macro destroys ax and dx and
; returns the offset in ax.
; ds must point to the code segment (i.e. the variables must be available)


MACRO   CalcAdr
LOCAL   @@L1
        add     ax, [PageOfs]           ;; Correction for screen page
        mul     [BytesPerLine]
        add     ax, bx                  ;; Add offset
        adc     dl, 0                   ;; Overflow
        cmp     dl, [Seg64]             ;; Segment already ok?
        je      @@L1                    ;; Already correct
        mov     [Seg64], dl             ;; Set segment
        call    [SegSelect]             ;; and set
@@L1:

ENDM



MACRO   SetToDS Reg
IF      VER3
        mov     Reg, [DSeg]
ELSE
        push    cs
        pop     Reg
ENDIF
ENDM




MACRO   RESETCPU
IF      P80386
        P386N
ELSEIF  P80286
        P286N
ELSE
        P8086
ENDIF

ENDM
